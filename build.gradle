buildscript {
	ext {
		springBootVersion = '2.7.4'
	}
	repositories {
		mavenCentral()
	}

	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath "io.spring.gradle:dependency-management-plugin:0.6.0.RELEASE"
	}
}

subprojects {
	apply plugin: 'java'
	apply plugin: 'org.springframework.boot'
	apply plugin: 'io.spring.dependency-management'

	sourceCompatibility = 11

	repositories {
		mavenCentral()
	}

	configurations {
		compileOnly {
			extendsFrom annotationProcessor
		}
	}

	// 모든 모듈에서 사용하는 라이브러리
	dependencies {
		implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
		implementation 'org.springframework.boot:spring-boot-starter-freemarker'
		implementation 'org.springframework.boot:spring-boot-starter-web'
		implementation 'org.springframework.boot:spring-boot-starter-actuator'
		implementation 'org.springframework.boot:spring-boot-starter-data-redis'
		//embedded-redis
		implementation 'it.ozimov:embedded-redis:0.7.2'
		implementation 'io.springfox:springfox-swagger2:2.6.1'
		implementation 'io.springfox:springfox-swagger-ui:2.6.1'
		implementation 'net.rakugakibox.util:yaml-resource-bundle:1.1'
		implementation 'com.google.code.gson:gson'
		compileOnly 'org.projectlombok:lombok'
		runtimeOnly 'com.h2database:h2'
		runtimeOnly 'mysql:mysql-connector-java'
		annotationProcessor 'org.projectlombok:lombok'
		testImplementation 'org.springframework.security:spring-security-test'
		testImplementation 'org.springframework.boot:spring-boot-starter-test'
	}
}

project(':son1') {
	// son1 모듈에만 필요한 라이브러리가 발생하면 이곳에 추가한다.
	dependencies {
		implementation 'org.springframework.boot:spring-boot-starter-security'
		implementation 'io.jsonwebtoken:jjwt:0.9.1'
	}
}

project(':son2') {
	// son2 모듈에만 필요한 라이브러리가 발생하면 이곳에 추가한다.
//	dependencies {
//		compile project(':son1')
//	}
}

project(':son3') {
	// son3 모듈에만 필요한 라이브러리가 발생하면 이곳에 추가한다.
//	dependencies {
//		compile project(':son1')
//	}
}